@page "/"
@attribute [Authorize]

@using Chinook.Models
@using Microsoft.EntityFrameworkCore

<PageTitle>Index</PageTitle>

<h1>Artists</h1>

@if (Artists == null)
{
    <Loading />
}
else
{
    <div class="input-group">
        <input type="search" class="form-control rounded" placeholder="Search artist" aria-label="Search" aria-describedby="search-addon" @onchange="OnchangeSearchText" />
        <button type="button" class="btn btn-outline-primary" @onclick="GetSearchArtists">search</button>
    </div>
    <br />
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in Artists)
            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@artist.Albums.Count()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Artist> Artists;
    private string Searchword;
    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }

    protected override async Task OnInitializedAsync() {
        await InvokeAsync(StateHasChanged);
        Artists = await GetArtists();
    }

    public async Task<List<Artist>> GetArtists()
    {   
        var dbContext = await DbFactory.CreateDbContextAsync();
        var users = dbContext.Users.Include(a => a.UserPlaylists).ToList();

        return dbContext.Artists.ToList();
    }

    public async Task<List<Album>> GetAlbumsForArtist(int artistId)
    {
        var dbContext = await DbFactory.CreateDbContextAsync();
        return dbContext.Albums.Where(a => a.ArtistId == artistId).ToList();
    }

    /// <summary>
    /// Event to capture the chnaged text on the input contoller 
    /// </summary>
    /// <param name="e"></param>
    private async void OnchangeSearchText(ChangeEventArgs e)
    {
        this.Searchword = (string)e.Value;
        if (string.IsNullOrEmpty(this.Searchword))
        {
            this.Artists = await GetArtists();
        }
    }

    /// <summary>
    /// Method to filter the artists accroding to the search text 
    /// </summary>
    public async void GetSearchArtists()
    {
        if (!string.IsNullOrEmpty(this.Searchword))
        {
            var ArtistsList = await GetArtists();
            this.Artists = ArtistsList.Where(s => s.Name.ToLower().
                                       StartsWith(this.Searchword.ToLower().TrimEnd())).ToList();
        }
        else
        {
            this.Artists = await GetArtists();
        }

    }
}
