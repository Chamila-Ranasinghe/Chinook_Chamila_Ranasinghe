@page "/playlist/{PlaylistId:long}"
@attribute [Authorize]

@using Chinook.Models
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;

@if (@Playlist != null)
{
    <div>
        <h1>
            Playlist <strong>@Playlist.Name</strong>
            <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="OpenDialogPopup">Edit</button>
        </h1>
        <button type="button" class="btn btn-danger" @onclick="DeletePlaylist">Delete</button>
    </div>
    <br />
}

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Playlist == null)
{
    <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Track</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var track in Playlist.Tracks)
            {
                <tr>
                    <td>@track.ArtistName - @track.AlbumTitle - @track.TrackName</td>
                    <td>
                        <div class="d-flex">
                            @if (Playlist.Name != "Favorite")
                            {
                                @if (track.IsFavorite)
                                {
                                    <a href="#" class="m-1" title="Unark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                                }
                                else
                                {
                                    <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                                }

                            }
                            <a href="#" class="m-1" title="Remove from this playlist" @onclick="@(() => RemoveTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-trash"></i></a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public long PlaylistId { get; set; }
    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    private Modal PlaylistDialog { get; set; }

    private Chinook.ClientModels.Playlist Playlist;
    private string CurrentUserId;
    private string InfoMessage;
    private string EditPlaylistName;

    protected override async Task OnInitializedAsync()
    {
        CurrentUserId = await GetUserId();

        await InvokeAsync(StateHasChanged);
        var DbContext = await DbFactory.CreateDbContextAsync();

        Playlist = DbContext.Playlists
            .Include(a => a.Tracks).ThenInclude(a => a.Album).ThenInclude(a => a.Artist)
            .Where(p => p.PlaylistId == PlaylistId)
            .Select(p => new ClientModels.Playlist()
                {
                    Name = p.Name,
                    Tracks = p.Tracks.Select(t => new ClientModels.PlaylistTrack()
                    {
                        AlbumTitle = t.Album.Title,
                        ArtistName = t.Album.Artist.Name,
                        TrackId = t.TrackId,
                        TrackName = t.Name,
                        IsFavorite = t.Playlists.Where(p => p.UserPlaylists.Any(up => up.UserId == CurrentUserId && up.Playlist.Name == "Favorites")).Any()
                    }).ToList()
                })
            .FirstOrDefault();
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private async void FavoriteTrack(long trackId)
    {
        var DbContext = await DbFactory.CreateDbContextAsync();
        var track = Playlist.Tracks.FirstOrDefault(t => t.TrackId == trackId);
        track.IsFavorite = true;
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
    }

    private void UnfavoriteTrack(long trackId)
    {
        var track = Playlist.Tracks.FirstOrDefault(t => t.TrackId == trackId);
        track.IsFavorite = false;
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";

    }

    /// <summary>
    /// Removing the track from the playlist
    /// </summary>
    /// <param name="trackId"></param>
    private async void RemoveTrack(long trackId)
    {
        try
        {
            if (trackId > 0)
            {
                var DbContext = await DbFactory.CreateDbContextAsync();
                var record = DbContext.Tracks.FirstOrDefault(t => trackId == trackId);
                if (record != null)
                {
                    DbContext.Tracks.Remove(record);
                    int deletedId = DbContext.SaveChanges();
                    if (deletedId > 0)
                    {
                        this.InfoMessage = "Track Deleted Successfully!";
                    }
                    else
                    {
                        this.InfoMessage = "Track Failed to Delete!";
                    }
                }
                else
                {
                    this.InfoMessage = "Track Does Not Exists!";
                }
            }
            else
            {
                this.InfoMessage = "Error Deleting the Track!";
            }
        }
        catch (Exception ex)
        {
            this.InfoMessage = "Error Deleting : " + ex.Message;
        }

    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }

    /// <summary>
    /// Delete the playlist 
    /// </summary>
    private async void DeletePlaylist()
    {
        try
        {
            if (this.PlaylistId > 0)
            {
                var DbContext = await DbFactory.CreateDbContextAsync();
                var record = DbContext.Playlists.FirstOrDefault(t => t.PlaylistId == this.PlaylistId);
                if (record != null)
                {
                    DbContext.Playlists.Remove(record);
                    int deletedId = DbContext.SaveChanges();
                    if (deletedId > 0)
                    {
                        this.InfoMessage = "Playlist Deleted Successfully!";
                    }
                    else
                    {
                        this.InfoMessage = "Playlist Failed to Delete!";
                    }
                }
                else
                {
                    this.InfoMessage = "Error Deleting the Playlist!";
                }
            }
        }
        catch (Exception ex)
        {
            this.InfoMessage = "Error Deleting : " + ex.Message;
        }
    }

    private async void OpenDialogPopup()
    {
        PlaylistDialog.Open();
    }

    /// <summary>
    /// Edit the playlist name 
    /// </summary>
    private async void EditPlaylist()
    {
        try
        {
            if (!string.IsNullOrEmpty(this.EditPlaylistName))
            {
                var DbContext = await DbFactory.CreateDbContextAsync();
                var playlist = DbContext.Playlists.FirstOrDefault(f => f.PlaylistId == this.PlaylistId);
                playlist.Name = this.EditPlaylistName.TrimEnd();
                int updateId = DbContext.SaveChanges();
                if(updateId > 0)
                {
                    this.InfoMessage = "Playlist Updated Successfully!";
                    this.OnInitializedAsync();
                }
                else
                {
                    this.InfoMessage = "Playlist Update Fail!";
                }
            }
            else
            {
                this.InfoMessage = "Playlist Name Cannot be Empty !";
            }
        }
        catch (Exception ex)
        {
            this.InfoMessage = "Error Editing Playlist : " + ex.Message;
        }

        PlaylistDialog.Close();
    }

    /// <summary>
    /// OnChage event to capture the changed text value 
    /// </summary>
    /// <param name="e">on change text </param>
    private async void OnchangeEditText(ChangeEventArgs e)
    {
        this.EditPlaylistName = (string)e.Value;
    }
}

<Modal @ref="PlaylistDialog">
    <Title>
        <strong>Edit Playlist</strong>
    </Title>
    <Body>

        @if (Playlist != null)
        {
            <div class="form-group mb-2">
                <label for="NewPlaylist">Rename Playlist</label>
                <br>
                <input type="text" id="NewPlaylist" class="form-control" value="@Playlist.Name" @onchange="OnchangeEditText">
            </div>
        }

    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="EditPlaylist">Edit</button>
    </Footer>
</Modal>
